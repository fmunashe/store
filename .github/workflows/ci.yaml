name: Spring Boot Gradle Build with PostgreSQL and Docker

on:
    push:
        branches:
            - main  # Trigger pipeline when code is pushed to the main branch
    pull_request:
        branches:
            - main  # Trigger pipeline on PRs to main branch

jobs:
    build:
        runs-on: ubuntu-latest  # Use Ubuntu as the base runner

        services:
            postgres:
                image: postgres:16.2  # Use official PostgreSQL Docker image
                env:
                    POSTGRES_USER: admin
                    POSTGRES_PASSWORD: admin
                    POSTGRES_DB: store
                ports:
                    - 5433:5432  # Expose PostgreSQL port
                options: >-
                    --health-cmd="pg_isready -U admin -d store"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        steps:
            # Checkout the code from the repository
            - name: Checkout code
              uses: actions/checkout@v2

            # Set up JDK 11 (or whichever version you're using for your Spring Boot app)
            - name: Set up JDK 17 (Adoptium)
              uses: actions/setup-java@v2
              with:
                  java-version: '17'
                  distribution: temurin

            # Set up Gradle (you can specify a Gradle wrapper version if needed)
            - name: Set up Gradle
              uses: gradle/wrapper-validation-action@v1

            # Clean the Gradle project
            - name: Clean Project
              run: ./gradlew clean

            # Format the Gradle project
            -   name: Format Project
                run: ./gradlew :spotlessApply

            # Build the Gradle project
            -   name: Build with Gradle
                run: ./gradlew build

            # Build Docker image
            - name: Build Docker image
              run: |
                  docker build -t store-springboot-app .

            # Run tests (optional, can be added based on your needs)
            - name: Run Tests
              run: ./gradlew test

    # Optional step to push the Docker image to Docker Hub (or any registry)
    push_to_dockerhub:
        needs: build
        runs-on: ubuntu-latest
        if: success()  # Only run if the build job was successful
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            # Set up DockerHub credentials (using secrets stored in GitHub Actions)
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            # Tag the Docker image
            - name: Tag Docker image
              run: |
                   docker tag store-springboot-app ${{ secrets.DOCKER_USERNAME }}/store-springboot-app:latest

            # Push the Docker image to Docker Hub
            - name: Push Docker image
              run: |
                  docker push ${{ secrets.DOCKER_USERNAME }}/store-springboot-app:latest
